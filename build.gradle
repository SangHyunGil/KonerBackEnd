plugins {
	id 'org.springframework.boot' version '2.5.6'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

group = 'project'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'mysql:mysql-connector-java'
	implementation 'com.h2database:h2'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.5.6'

	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'io.jsonwebtoken:jjwt:0.9.1'

	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	implementation 'com.google.code.gson:gson'

	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'io.springfox:springfox-boot-starter:3.0.0'

	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.0.1.RELEASE'
	implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.3'

	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'org.webjars:sockjs-client:1.0.2'
	implementation 'org.webjars:stomp-websocket:2.3.3'
	implementation(platform("org.apache.logging.log4j:log4j-bom:2.15.0"))

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

}

test {
	useJUnitPlatform()
	systemProperty "jasypt.encryptor.password", project.getProperties().get("jasypt.encryptor.password")
}

configure(project) {
	apply plugin: "io.spring.dependency-management"

	dependencies {
		implementation "com.querydsl:querydsl-jpa"
		implementation "com.querydsl:querydsl-core"
		annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa" // querydsl JPAAnnotationProcessor 사용 지정
		annotationProcessor "jakarta.persistence:jakarta.persistence-api:2.2.3"
		annotationProcessor "jakarta.annotation:jakarta.annotation-api:1.3.5"
	}

	// querydsl 적용
	def generated='src/main/generated'
	sourceSets {
		main.java.srcDirs += [ generated ]
	}

	tasks.withType(JavaCompile) {
		options.generatedSourceOutputDirectory = file(generated)
	}

	clean.doLast {
		file(generated).deleteDir()
	}
}
